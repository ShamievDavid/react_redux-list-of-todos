{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","app/hooks.ts","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","query","status","initialState","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","TodoItem","setPickedTodo","pickedTodo","id","title","completed","className","classNames","onClick","TodoList","map","TodoFilter","setFilteredBy","setQuery","clearQuery","onChange","event","target","value","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","clearPickedTodo","useState","loading","setLoading","user","setUser","userId","useEffect","getUser","finally","href","name","useAppDispatch","useDispatch","useAppSelector","useSelector","App","dispatch","todosActions","filteredTodos","filterBy","preparedQuery","toLowerCase","trim","includes","getFilteredTodos","filterActions","length","currentTodoActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cd3f0126.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeTodo = (): RemoveTodoAction => ({ type: 'currentTodo/REMOVE' });\n\nconst setTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setTodo, removeTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/SET':\n      return action.payload;\n    case 'currentTodo/REMOVE':\n      return null;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetQueryAction = {\n  type: 'filter/SET_QUERY';\n  payload: string;\n};\n\ntype ClearQueryAction = {\n  type: 'filter/CLEAR_QUERY'\n};\n\ntype SetStatusAction = {\n  type: 'filter/SET_STATUS';\n  payload: Status;\n};\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/SET_QUERY', payload: query,\n});\n\nconst clearQuery = (): ClearQueryAction => ({ type: 'filter/CLEAR_QUERY' });\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/SET_STATUS',\n  payload: status,\n});\n\ntype Action = SetQueryAction\n| ClearQueryAction\n| SetStatusAction ;\n\nexport const actions = { setQuery, clearQuery, setStatus };\n\ntype Filter = {\n  query: string;\n  status: Status;\n};\n\nconst initialState: Filter = {\n  query: '',\n  status: 'all',\n};\n\nconst filterReducer = (\n  state: Filter = initialState,\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/SET_QUERY':\n      return { ...state, query: action.payload };\n    case 'filter/CLEAR_QUERY':\n      return { ...state, query: '' };\n    case 'filter/SET_STATUS':\n      return { ...state, status: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todos/SET', payload: Todo [] };\n\ntype Action = SetTodosAction;\n\nconst setTodos = (\n  todos: Todo [],\n): SetTodosAction => ({ type: 'todos/SET', payload: todos });\n\nconst todosReducer = (\n  state: Todo [] = [],\n  action: Action,\n): Todo [] => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport const actions = { setTodos };\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todo: Todo,\n  setPickedTodo: (pickedTodo: Todo) => void,\n  pickedTodo: Todo | null,\n};\n\nexport const TodoItem:React.FC<Props> = ({\n  todo,\n  setPickedTodo,\n  pickedTodo,\n}) => {\n  const {\n    id,\n    title,\n    completed,\n  } = todo;\n\n  return (\n    <tr\n      data-cy=\"todo\"\n      className=\"\"\n    >\n      <td className=\"is-vcentered\">{id}</td>\n      <td className=\"is-vcentered\">\n        {completed && (\n          <span className=\"icon\" data-cy=\"iconCompleted\">\n            <i className=\"fas fa-check\" />\n          </span>\n        )}\n      </td>\n      <td className=\"is-vcentered is-expanded\">\n\n        <p\n          className={classNames({\n            'has-text-success': completed,\n            'has-text-danger': !completed,\n          })}\n        >\n          {title}\n        </p>\n      </td>\n      <td className=\"has-text-right is-vcentered\">\n        <button\n          data-cy=\"selectButton\"\n          className=\"button\"\n          type=\"button\"\n          onClick={() => setPickedTodo(todo)}\n        >\n          <span className=\"icon\">\n            <i className={classNames('far', {\n              'fa-eye': pickedTodo?.id !== todo.id,\n              'fa-eye-slash': pickedTodo?.id === todo.id,\n            })}\n            />\n          </span>\n        </button>\n      </td>\n    </tr>\n  );\n};\n","import React from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoItem } from '../TodoItem/TodoItem';\n\ntype Props = {\n  todos: Todo[],\n  setPickedTodo: (pickedTodo: Todo) => void,\n  pickedTodo: Todo | null,\n};\n\nexport const TodoList: React.FC<Props> = ({\n  todos,\n  setPickedTodo,\n  pickedTodo,\n}) => (\n  <table className=\"table is-narrow is-fullwidth\">\n    <thead>\n      <tr>\n        <th>#</th>\n        <th>\n          <span className=\"icon\">\n            <i className=\"fas fa-check\" />\n          </span>\n        </th>\n        <th>Title</th>\n        <th> </th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {todos.map(todo => (\n        <TodoItem\n          key={todo.id}\n          todo={todo}\n          setPickedTodo={setPickedTodo}\n          pickedTodo={pickedTodo}\n        />\n      ))}\n    </tbody>\n  </table>\n);\n","import { Status } from '../../types/Status';\n\ntype Props = {\n  setFilteredBy: (status: Status) => void,\n  setQuery: (query: string) => void,\n  clearQuery: () => void,\n  query: string,\n};\n\nexport const TodoFilter:React.FC<Props> = ({\n  setFilteredBy,\n  setQuery,\n  clearQuery,\n  query,\n}) => (\n  <form className=\"field has-addons\">\n    <p className=\"control\">\n      <span className=\"select\">\n        <select\n          data-cy=\"statusSelect\"\n          onChange={(event) => setFilteredBy(event.target.value as Status)}\n        >\n          <option\n            value=\"all\"\n          >\n            All\n          </option>\n\n          <option\n            value=\"active\"\n          >\n            Active\n          </option>\n          <option\n            value=\"completed\"\n          >\n            Completed\n          </option>\n        </select>\n      </span>\n    </p>\n\n    <p className=\"control is-expanded has-icons-left has-icons-right\">\n      <input\n        data-cy=\"searchInput\"\n        type=\"text\"\n        className=\"input\"\n        placeholder=\"Search...\"\n        value={query}\n        onChange={(event) => setQuery(event.target.value)}\n      />\n      <span className=\"icon is-left\">\n        <i className=\"fas fa-magnifying-glass\" />\n      </span>\n\n      {query && (\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n          <button\n            data-cy=\"clearSearchButton\"\n            type=\"button\"\n            className=\"delete\"\n            onClick={clearQuery}\n          />\n        </span>\n      )}\n\n    </p>\n  </form>\n);\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { getUser } from '../../api';\nimport { User } from '../../types/User';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  pickedTodo: Todo,\n  clearPickedTodo: () => void;\n};\n\nexport const TodoModal: React.FC<Props> = ({\n  pickedTodo,\n  clearPickedTodo,\n}) => {\n  const [loading, setLoading] = useState(false);\n  const [user, setUser] = useState<User>();\n\n  const {\n    userId,\n    id,\n    title,\n    completed,\n  } = pickedTodo;\n\n  useEffect(() => {\n    setLoading(true);\n\n    getUser(userId)\n      .then(setUser)\n      .finally(() => setLoading(false));\n  }, [userId]);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {loading ? (\n        <Loader />\n      ) : (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={clearPickedTodo}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {completed\n                ? (<strong className=\"has-text-success\">Done</strong>)\n                : (<strong className=\"has-text-danger\">Planned</strong>)}\n\n              {' by '}\n\n              <a href=\"mailto:Sincere@april.biz\">\n                {user?.name}\n              </a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { getTodos } from './api';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { actions as filterActions } from './features/filter';\nimport { Status } from './types/Status';\nimport { Todo } from './types/Todo';\nimport { actions as currentTodoActions } from './features/currentTodo';\n\nconst getFilteredTodos = (\n  todos: Todo[],\n  query: string,\n  filterBy: Status,\n) => {\n  let filteredTodos = [...todos];\n\n  if (query) {\n    const preparedQuery = query.toLowerCase().trim();\n\n    filteredTodos = filteredTodos\n      .filter(todo => todo.title.toLowerCase().includes(preparedQuery));\n  }\n\n  switch (filterBy) {\n    case 'all':\n      return filteredTodos;\n    case 'active':\n      return filteredTodos.filter(todo => !todo.completed);\n    case 'completed':\n      return filteredTodos.filter(todo => todo.completed);\n    default:\n      return filteredTodos;\n  }\n};\n\nexport const App: React.FC = () => {\n  const [loading, setLoading] = useState(false);\n  const todos = useAppSelector(state => state.todos);\n  const filter = useAppSelector(state => state.filter);\n  const pickedTodo = useAppSelector(state => state.currentTodo);\n  const dispatch = useAppDispatch();\n\n  useEffect(() => {\n    setLoading(true);\n    getTodos()\n      .then((res) => dispatch(todosActions.setTodos(res)))\n      .finally(() => setLoading(false));\n  }, []);\n\n  const setQuery = (query: string) => {\n    dispatch(filterActions.setQuery(query));\n  };\n\n  const clearQuery = () => {\n    dispatch(filterActions.clearQuery());\n  };\n\n  const setFilterBy = (status: Status) => {\n    dispatch(filterActions.setStatus(status));\n  };\n\n  const setPickedTodo = (todo: Todo) => {\n    dispatch(currentTodoActions.setTodo(todo));\n  };\n\n  const clearPickedTodo = () => {\n    dispatch(currentTodoActions.removeTodo());\n  };\n\n  const filteredTodos = getFilteredTodos(todos, filter.query, filter.status);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter\n                setFilteredBy={setFilterBy}\n                clearQuery={clearQuery}\n                setQuery={setQuery}\n                query={filter.query}\n              />\n            </div>\n\n            <div className=\"block\">\n              {loading && (\n                <Loader />\n              )}\n              {!loading && todos.length > 0 && (\n                <TodoList\n                  todos={filteredTodos}\n                  setPickedTodo={setPickedTodo}\n                  pickedTodo={pickedTodo}\n                />\n              )}\n\n            </div>\n          </div>\n        </div>\n      </div>\n      {pickedTodo && (\n        <TodoModal\n          pickedTodo={pickedTodo}\n          clearPickedTodo={clearPickedTodo}\n        />\n      )}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}